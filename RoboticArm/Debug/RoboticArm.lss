
RoboticArm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800200  00000536  000005ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000536  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  00800202  00800202  000005cc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  0000063c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000107f  00000000  00000000  0000069c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d03  00000000  00000000  0000171b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000601  00000000  00000000  0000241e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000011c  00000000  00000000  00002a20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000740  00000000  00000000  00002b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000316  00000000  00000000  0000327c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00003592  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3f c0       	rjmp	.+126    	; 0x124 <__vector_41>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	4e c0       	rjmp	.+156    	; 0x156 <__vector_46>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e6 e3       	ldi	r30, 0x36	; 54
  fc:	f5 e0       	ldi	r31, 0x05	; 5
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 30       	cpi	r26, 0x02	; 2
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a2 e0       	ldi	r26, 0x02	; 2
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ac 31       	cpi	r26, 0x1C	; 28
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	e8 d0       	rcall	.+464    	; 0x2f0 <main>
 120:	08 c2       	rjmp	.+1040   	; 0x532 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <__vector_41>:
void USART_putstring(char* StringPtr){
	
	while(*StringPtr != 0x00){    
		USART_Transmit(*StringPtr);    
		StringPtr++;}        
}
 124:	1f 92       	push	r1
 126:	0f 92       	push	r0
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	0f 92       	push	r0
 12c:	11 24       	eor	r1, r1
 12e:	0b b6       	in	r0, 0x3b	; 59
 130:	0f 92       	push	r0
 132:	8f 93       	push	r24
 134:	ef 93       	push	r30
 136:	ff 93       	push	r31
 138:	e1 e2       	ldi	r30, 0x21	; 33
 13a:	f1 e0       	ldi	r31, 0x01	; 1
 13c:	80 81       	ld	r24, Z
 13e:	82 60       	ori	r24, 0x02	; 2
 140:	80 83       	st	Z, r24
 142:	ff 91       	pop	r31
 144:	ef 91       	pop	r30
 146:	8f 91       	pop	r24
 148:	0f 90       	pop	r0
 14a:	0b be       	out	0x3b, r0	; 59
 14c:	0f 90       	pop	r0
 14e:	0f be       	out	0x3f, r0	; 63
 150:	0f 90       	pop	r0
 152:	1f 90       	pop	r1
 154:	18 95       	reti

00000156 <__vector_46>:
 156:	1f 92       	push	r1
 158:	0f 92       	push	r0
 15a:	0f b6       	in	r0, 0x3f	; 63
 15c:	0f 92       	push	r0
 15e:	11 24       	eor	r1, r1
 160:	0b b6       	in	r0, 0x3b	; 59
 162:	0f 92       	push	r0
 164:	2f 93       	push	r18
 166:	3f 93       	push	r19
 168:	4f 93       	push	r20
 16a:	5f 93       	push	r21
 16c:	6f 93       	push	r22
 16e:	7f 93       	push	r23
 170:	8f 93       	push	r24
 172:	9f 93       	push	r25
 174:	af 93       	push	r26
 176:	bf 93       	push	r27
 178:	cf 93       	push	r28
 17a:	df 93       	push	r29
 17c:	ef 93       	push	r30
 17e:	ff 93       	push	r31
 180:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
 184:	f0 91 27 01 	lds	r31, 0x0127	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>
 188:	f0 93 13 02 	sts	0x0213, r31	; 0x800213 <x+0x1>
 18c:	e0 93 12 02 	sts	0x0212, r30	; 0x800212 <x>
 190:	cf 01       	movw	r24, r30
 192:	60 e1       	ldi	r22, 0x10	; 16
 194:	77 e2       	ldi	r23, 0x27	; 39
 196:	a6 d1       	rcall	.+844    	; 0x4e4 <__divmodhi4>
 198:	46 2f       	mov	r20, r22
 19a:	60 93 0f 02 	sts	0x020F, r22	; 0x80020f <tenthou>
 19e:	70 93 10 02 	sts	0x0210, r23	; 0x800210 <tenthou+0x1>
 1a2:	c8 ee       	ldi	r28, 0xE8	; 232
 1a4:	d3 e0       	ldi	r29, 0x03	; 3
 1a6:	be 01       	movw	r22, r28
 1a8:	9d d1       	rcall	.+826    	; 0x4e4 <__divmodhi4>
 1aa:	36 2f       	mov	r19, r22
 1ac:	60 93 0d 02 	sts	0x020D, r22	; 0x80020d <thou>
 1b0:	70 93 0e 02 	sts	0x020E, r23	; 0x80020e <thou+0x1>
 1b4:	cf 01       	movw	r24, r30
 1b6:	be 01       	movw	r22, r28
 1b8:	95 d1       	rcall	.+810    	; 0x4e4 <__divmodhi4>
 1ba:	c4 e6       	ldi	r28, 0x64	; 100
 1bc:	d0 e0       	ldi	r29, 0x00	; 0
 1be:	be 01       	movw	r22, r28
 1c0:	91 d1       	rcall	.+802    	; 0x4e4 <__divmodhi4>
 1c2:	26 2f       	mov	r18, r22
 1c4:	60 93 0b 02 	sts	0x020B, r22	; 0x80020b <hunds>
 1c8:	70 93 0c 02 	sts	0x020C, r23	; 0x80020c <hunds+0x1>
 1cc:	cf 01       	movw	r24, r30
 1ce:	be 01       	movw	r22, r28
 1d0:	89 d1       	rcall	.+786    	; 0x4e4 <__divmodhi4>
 1d2:	6a e0       	ldi	r22, 0x0A	; 10
 1d4:	70 e0       	ldi	r23, 0x00	; 0
 1d6:	86 d1       	rcall	.+780    	; 0x4e4 <__divmodhi4>
 1d8:	60 93 09 02 	sts	0x0209, r22	; 0x800209 <tents>
 1dc:	70 93 0a 02 	sts	0x020A, r23	; 0x80020a <tents+0x1>
 1e0:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <ones>
 1e4:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <ones+0x1>
 1e8:	e4 e1       	ldi	r30, 0x14	; 20
 1ea:	f2 e0       	ldi	r31, 0x02	; 2
 1ec:	40 5d       	subi	r20, 0xD0	; 208
 1ee:	40 83       	st	Z, r20
 1f0:	30 5d       	subi	r19, 0xD0	; 208
 1f2:	31 83       	std	Z+1, r19	; 0x01
 1f4:	20 5d       	subi	r18, 0xD0	; 208
 1f6:	22 83       	std	Z+2, r18	; 0x02
 1f8:	60 5d       	subi	r22, 0xD0	; 208
 1fa:	63 83       	std	Z+3, r22	; 0x03
 1fc:	80 5d       	subi	r24, 0xD0	; 208
 1fe:	84 83       	std	Z+4, r24	; 0x04
 200:	15 82       	std	Z+5, r1	; 0x05
 202:	e1 e2       	ldi	r30, 0x21	; 33
 204:	f1 e0       	ldi	r31, 0x01	; 1
 206:	80 81       	ld	r24, Z
 208:	8d 7f       	andi	r24, 0xFD	; 253
 20a:	80 83       	st	Z, r24
 20c:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <__TEXT_REGION_LENGTH__+0x700125>
 210:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
 214:	ff 91       	pop	r31
 216:	ef 91       	pop	r30
 218:	df 91       	pop	r29
 21a:	cf 91       	pop	r28
 21c:	bf 91       	pop	r27
 21e:	af 91       	pop	r26
 220:	9f 91       	pop	r25
 222:	8f 91       	pop	r24
 224:	7f 91       	pop	r23
 226:	6f 91       	pop	r22
 228:	5f 91       	pop	r21
 22a:	4f 91       	pop	r20
 22c:	3f 91       	pop	r19
 22e:	2f 91       	pop	r18
 230:	0f 90       	pop	r0
 232:	0b be       	out	0x3b, r0	; 59
 234:	0f 90       	pop	r0
 236:	0f be       	out	0x3f, r0	; 63
 238:	0f 90       	pop	r0
 23a:	1f 90       	pop	r1
 23c:	18 95       	reti

0000023e <_Z10USART_Initj>:
 23e:	90 93 d5 00 	sts	0x00D5, r25	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
 242:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
 246:	e1 ed       	ldi	r30, 0xD1	; 209
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	80 81       	ld	r24, Z
 24c:	88 60       	ori	r24, 0x08	; 8
 24e:	80 83       	st	Z, r24
 250:	08 95       	ret

00000252 <_Z10timer_initv>:
	PORTL &=~(1 << 6);		// shut trigger
}

void timer_init(){
	
	TCCR1A |= 1 << WGM11 | 1 << COM1A1;
 252:	e0 e8       	ldi	r30, 0x80	; 128
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	80 81       	ld	r24, Z
 258:	82 68       	ori	r24, 0x82	; 130
 25a:	80 83       	st	Z, r24
	TCCR1B |= 1 << WGM13 | 1 << WGM12 | 1 << CS11; 
 25c:	e1 e8       	ldi	r30, 0x81	; 129
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	80 81       	ld	r24, Z
 262:	8a 61       	ori	r24, 0x1A	; 26
 264:	80 83       	st	Z, r24
	ICR1 = 6700;
 266:	8c e2       	ldi	r24, 0x2C	; 44
 268:	9a e1       	ldi	r25, 0x1A	; 26
 26a:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x700087>
 26e:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x700086>
	OCR1A = 3080;
 272:	88 e0       	ldi	r24, 0x08	; 8
 274:	9c e0       	ldi	r25, 0x0C	; 12
 276:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 27a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
 27e:	08 95       	ret

00000280 <_Z11start_timerii>:
}

void start_timer(int timer, int prescaler){
	
	switch(timer){															// reset counters and prescaler
 280:	00 97       	sbiw	r24, 0x00	; 0
 282:	19 f0       	breq	.+6      	; 0x28a <_Z11start_timerii+0xa>
 284:	05 97       	sbiw	r24, 0x05	; 5
 286:	31 f0       	breq	.+12     	; 0x294 <_Z11start_timerii+0x14>
 288:	0e c0       	rjmp	.+28     	; 0x2a6 <_Z11start_timerii+0x26>
		
	  case 0:	TCNT0 = 0x00;
 28a:	16 bc       	out	0x26, r1	; 38
				TCCR0B &= ~(1 << CS00) & ~(1 << CS01) & ~(1 << CS02);
 28c:	85 b5       	in	r24, 0x25	; 37
 28e:	88 7f       	andi	r24, 0xF8	; 248
 290:	85 bd       	out	0x25, r24	; 37
				break;
 292:	09 c0       	rjmp	.+18     	; 0x2a6 <_Z11start_timerii+0x26>
				
	  case 5:	TCNT5 = 0x00;
 294:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <__TEXT_REGION_LENGTH__+0x700125>
 298:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
				TCCR5B &= ~(1 << CS50) & ~(1 << CS51) & ~(1 << CS52);
 29c:	e1 e2       	ldi	r30, 0x21	; 33
 29e:	f1 e0       	ldi	r31, 0x01	; 1
 2a0:	80 81       	ld	r24, Z
 2a2:	88 7f       	andi	r24, 0xF8	; 248
 2a4:	80 83       	st	Z, r24
				break;
	}
	
												
	
	switch(prescaler){														// set prescaler
 2a6:	61 15       	cp	r22, r1
 2a8:	71 05       	cpc	r23, r1
 2aa:	21 f0       	breq	.+8      	; 0x2b4 <_Z11start_timerii+0x34>
 2ac:	61 15       	cp	r22, r1
 2ae:	71 40       	sbci	r23, 0x01	; 1
 2b0:	29 f0       	breq	.+10     	; 0x2bc <_Z11start_timerii+0x3c>
 2b2:	08 95       	ret
		
	  case   0: TCCR0B |= 1 << CS00;
 2b4:	85 b5       	in	r24, 0x25	; 37
 2b6:	81 60       	ori	r24, 0x01	; 1
 2b8:	85 bd       	out	0x25, r24	; 37
				break;
 2ba:	08 95       	ret
	  case 256: TCCR0B |= 1 << CS02;
 2bc:	85 b5       	in	r24, 0x25	; 37
 2be:	84 60       	ori	r24, 0x04	; 4
 2c0:	85 bd       	out	0x25, r24	; 37
 2c2:	08 95       	ret

000002c4 <_Z12sonarTriggerv>:
	
}*/

void sonarTrigger(){
	
	start_timer(0, 256);
 2c4:	60 e0       	ldi	r22, 0x00	; 0
 2c6:	71 e0       	ldi	r23, 0x01	; 1
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	d9 df       	rcall	.-78     	; 0x280 <_Z11start_timerii>
	while(TCNT0 < 1)			// delay 12micro
 2ce:	86 b5       	in	r24, 0x26	; 38
 2d0:	81 11       	cpse	r24, r1
 2d2:	08 c0       	rjmp	.+16     	; 0x2e4 <_Z12sonarTriggerv+0x20>
	{
		PORTL |= 1 << 6;	// start trigger
 2d4:	eb e0       	ldi	r30, 0x0B	; 11
 2d6:	f1 e0       	ldi	r31, 0x01	; 1
 2d8:	80 81       	ld	r24, Z
 2da:	80 64       	ori	r24, 0x40	; 64
 2dc:	80 83       	st	Z, r24
}*/

void sonarTrigger(){
	
	start_timer(0, 256);
	while(TCNT0 < 1)			// delay 12micro
 2de:	86 b5       	in	r24, 0x26	; 38
 2e0:	88 23       	and	r24, r24
 2e2:	d1 f3       	breq	.-12     	; 0x2d8 <_Z12sonarTriggerv+0x14>
	{
		PORTL |= 1 << 6;	// start trigger
	}
	PORTL &=~(1 << 6);		// shut trigger
 2e4:	eb e0       	ldi	r30, 0x0B	; 11
 2e6:	f1 e0       	ldi	r31, 0x01	; 1
 2e8:	80 81       	ld	r24, Z
 2ea:	8f 7b       	andi	r24, 0xBF	; 191
 2ec:	80 83       	st	Z, r24
 2ee:	08 95       	ret

000002f0 <main>:

int main(void)

{	
	// global interrupt enable
	sei();	
 2f0:	78 94       	sei
				
	DDRB = 0xff;
 2f2:	8f ef       	ldi	r24, 0xFF	; 255
 2f4:	84 b9       	out	0x04, r24	; 4
	DDRL |= 1 << 6 | 1 << 2;		 //set trigger pin PL6 as output
 2f6:	ca e0       	ldi	r28, 0x0A	; 10
 2f8:	d1 e0       	ldi	r29, 0x01	; 1
 2fa:	88 81       	ld	r24, Y
 2fc:	84 64       	ori	r24, 0x44	; 68
 2fe:	88 83       	st	Y, r24
	
	PORTB = 0x00;
 300:	15 b8       	out	0x05, r1	; 5
	PORTL |= (1 << 5) | (1 << 7);
 302:	eb e0       	ldi	r30, 0x0B	; 11
 304:	f1 e0       	ldi	r31, 0x01	; 1
 306:	80 81       	ld	r24, Z
 308:	80 6a       	ori	r24, 0xA0	; 160
 30a:	80 83       	st	Z, r24
	timer_init();
 30c:	a2 df       	rcall	.-188    	; 0x252 <_Z10timer_initv>
	DDRL &=~(1 << DDL7) & ~(1 << DDL5);
 30e:	88 81       	ld	r24, Y
 310:	8f 75       	andi	r24, 0x5F	; 95
 312:	88 83       	st	Y, r24
	//PORTL = 0x00;
	MCUCR &=~ (1 << PUD);
 314:	85 b7       	in	r24, 0x35	; 53
 316:	8f 7e       	andi	r24, 0xEF	; 239
 318:	85 bf       	out	0x35, r24	; 53
	USART_Init(UBR_9600);
 31a:	87 e6       	ldi	r24, 0x67	; 103
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	8f df       	rcall	.-226    	; 0x23e <_Z10USART_Initj>
	TCCR3B |= (1 << CS32) | (1 << CS30);
 320:	e1 e9       	ldi	r30, 0x91	; 145
 322:	f0 e0       	ldi	r31, 0x00	; 0
 324:	80 81       	ld	r24, Z
 326:	85 60       	ori	r24, 0x05	; 5
 328:	80 83       	st	Z, r24
	TCNT3 = 0;
 32a:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
 32e:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
	
	//set PJ1 as input
	DDRJ &=~(1 << PJ1);
 332:	e4 e0       	ldi	r30, 0x04	; 4
 334:	f1 e0       	ldi	r31, 0x01	; 1
 336:	80 81       	ld	r24, Z
 338:	8d 7f       	andi	r24, 0xFD	; 253
 33a:	80 83       	st	Z, r24
	
	//Pin on change interrupt Reg:PCMSK1, Pin:PCINT10(PJ1), bit 2
	PCMSK1 |= (1 << PCINT10);
 33c:	ec e6       	ldi	r30, 0x6C	; 108
 33e:	f0 e0       	ldi	r31, 0x00	; 0
 340:	80 81       	ld	r24, Z
 342:	84 60       	ori	r24, 0x04	; 4
 344:	80 83       	st	Z, r24
	//Set PCIE1, bit 1
	//PCICR |= (1 << PCIE1);
	
	//Input Capture pin ( ICP4, PL0, AMega pin 49 ) edge select setup
	//TCCR4B ICES4 bit 6 - input capture edge select - 1 rising
	TCCR4B |= (1 << ICES4);
 346:	e1 ea       	ldi	r30, 0xA1	; 161
 348:	f0 e0       	ldi	r31, 0x00	; 0
 34a:	80 81       	ld	r24, Z
 34c:	80 64       	ori	r24, 0x40	; 64
 34e:	80 83       	st	Z, r24
	
	//Input Capture pin ( ICP5, PL1, AMega pin 48 ) edge select setup
	//TCCR5B ICES5 bit 6 - input capture edge select - 0 falling
	
	//Input Capture interrupt enable - TIMSK4 (input capture mask register), ICIE4, bit 5
	TIMSK4 |= (1 << ICIE4);
 350:	e2 e7       	ldi	r30, 0x72	; 114
 352:	f0 e0       	ldi	r31, 0x00	; 0
 354:	80 81       	ld	r24, Z
 356:	80 62       	ori	r24, 0x20	; 32
 358:	80 83       	st	Z, r24
	
	//Input Capture interrupt enable - TIMSK5 (input capture mask register), ICIE5, bit 5
	TIMSK5 |= (1 << ICIE5);
 35a:	e3 e7       	ldi	r30, 0x73	; 115
 35c:	f0 e0       	ldi	r31, 0x00	; 0
 35e:	80 81       	ld	r24, Z
 360:	80 62       	ori	r24, 0x20	; 32
 362:	80 83       	st	Z, r24
	
	/*char tab2[1024];
	strncpy(tab2, to_string(123.45).strcat(), sizeof(tab2));
	tab2[sizeof(tab2) - 1] = 0;*/
	
	ICR_first_value = 0;
 364:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <ICR_first_value+0x1>
 368:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <ICR_first_value>
	ICR_last_value = 0;
 36c:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <ICR_last_value+0x1>
 370:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <ICR_last_value>
		_delay_ms(500);*/
		
		sonarTrigger();
		
		//_delay_ms(1000);
		if(TCNT3 > 15000){
 374:	0f 2e       	mov	r0, r31
 376:	f4 e9       	ldi	r31, 0x94	; 148
 378:	cf 2e       	mov	r12, r31
 37a:	d1 2c       	mov	r13, r1
 37c:	f0 2d       	mov	r31, r0
		
		//OCR1A = 5100;
		
		
		
		if(!(PINL & (1 << PINL7))) startServo = true;
 37e:	09 e0       	ldi	r16, 0x09	; 9
 380:	11 e0       	ldi	r17, 0x01	; 1
			
			
		if(startServo){
			
			OCR1A = 1240;
 382:	c8 e8       	ldi	r28, 0x88	; 136
 384:	d0 e0       	ldi	r29, 0x00	; 0
 386:	0f 2e       	mov	r0, r31
 388:	f8 ed       	ldi	r31, 0xD8	; 216
 38a:	6f 2e       	mov	r6, r31
 38c:	f4 e0       	ldi	r31, 0x04	; 4
 38e:	7f 2e       	mov	r7, r31
 390:	f0 2d       	mov	r31, r0
		for(int i = OCR1A; i < 5101; i+=7){
			
			if(!(PINL & (1 << PINL5))){
				
				 startServo = false; 
				 OCR1A = 3080;
 392:	0f 2e       	mov	r0, r31
 394:	f8 e0       	ldi	r31, 0x08	; 8
 396:	af 2e       	mov	r10, r31
 398:	fc e0       	ldi	r31, 0x0C	; 12
 39a:	bf 2e       	mov	r11, r31
 39c:	f0 2d       	mov	r31, r0
			sonarTrigger();
			_delay_ms(5);
			
			
			
			if(ICR5 < 3600){
 39e:	0f 2e       	mov	r0, r31
 3a0:	f6 e2       	ldi	r31, 0x26	; 38
 3a2:	ef 2e       	mov	r14, r31
 3a4:	ff 24       	eor	r15, r15
 3a6:	f3 94       	inc	r15
 3a8:	f0 2d       	mov	r31, r0
					_ICR_last_value = false;
					
					
				}
				
				_ICR_first_value = true;
 3aa:	55 24       	eor	r5, r5
		/*PORTB = 0xFF;
		_delay_ms(500);
		PORTB = 0x00;
		_delay_ms(500);*/
		
		sonarTrigger();
 3ac:	53 94       	inc	r5
 3ae:	8a df       	rcall	.-236    	; 0x2c4 <_Z12sonarTriggerv>
		
		//_delay_ms(1000);
		if(TCNT3 > 15000){
 3b0:	f6 01       	movw	r30, r12
 3b2:	80 81       	ld	r24, Z
 3b4:	91 81       	ldd	r25, Z+1	; 0x01
 3b6:	89 39       	cpi	r24, 0x99	; 153
 3b8:	9a 43       	sbci	r25, 0x3A	; 58
 3ba:	18 f0       	brcs	.+6      	; 0x3c2 <main+0xd2>
		//USART_putstring(String);
		//USART_putstring(distance);
		TCNT3 = 0;
 3bc:	f6 01       	movw	r30, r12
 3be:	11 82       	std	Z+1, r1	; 0x01
 3c0:	10 82       	st	Z, r1
		
		//OCR1A = 5100;
		
		
		
		if(!(PINL & (1 << PINL7))) startServo = true;
 3c2:	f8 01       	movw	r30, r16
 3c4:	80 81       	ld	r24, Z
 3c6:	88 23       	and	r24, r24
 3c8:	1c f0       	brlt	.+6      	; 0x3d0 <main+0xe0>
 3ca:	50 92 11 02 	sts	0x0211, r5	; 0x800211 <startServo>
 3ce:	05 c0       	rjmp	.+10     	; 0x3da <main+0xea>
			
			
		if(startServo){
 3d0:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <startServo>
 3d4:	88 23       	and	r24, r24
 3d6:	09 f4       	brne	.+2      	; 0x3da <main+0xea>
			
			OCR1A = 1240;
 3d8:	7c c0       	rjmp	.+248    	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
 3da:	79 82       	std	Y+1, r7	; 0x01
			sonarTrigger();
 3dc:	68 82       	st	Y, r6
 3de:	72 df       	rcall	.-284    	; 0x2c4 <_Z12sonarTriggerv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3e0:	ff ef       	ldi	r31, 0xFF	; 255
 3e2:	29 e6       	ldi	r18, 0x69	; 105
 3e4:	88 e1       	ldi	r24, 0x18	; 24
 3e6:	f1 50       	subi	r31, 0x01	; 1
 3e8:	20 40       	sbci	r18, 0x00	; 0
 3ea:	80 40       	sbci	r24, 0x00	; 0
 3ec:	e1 f7       	brne	.-8      	; 0x3e6 <main+0xf6>
 3ee:	00 c0       	rjmp	.+0      	; 0x3f0 <main+0x100>
 3f0:	00 00       	nop
			_delay_ms(500);
			//PORTB = 0xFF;
		for(int i = OCR1A; i < 5101; i+=7){
 3f2:	88 80       	ld	r8, Y
 3f4:	99 80       	ldd	r9, Y+1	; 0x01
 3f6:	9d ee       	ldi	r25, 0xED	; 237
 3f8:	89 16       	cp	r8, r25
 3fa:	93 e1       	ldi	r25, 0x13	; 19
 3fc:	99 06       	cpc	r9, r25
 3fe:	0c f0       	brlt	.+2      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 400:	66 c0       	rjmp	.+204    	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
			
			if(!(PINL & (1 << PINL5))){
 402:	f8 01       	movw	r30, r16
 404:	80 81       	ld	r24, Z
 406:	85 ff       	sbrs	r24, 5
 408:	05 c0       	rjmp	.+10     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 40a:	07 c0       	rjmp	.+14     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 40c:	f8 01       	movw	r30, r16
 40e:	80 81       	ld	r24, Z
 410:	85 fd       	sbrc	r24, 5
				
				 startServo = false; 
				 OCR1A = 3080;
 412:	03 c0       	rjmp	.+6      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 414:	b9 82       	std	Y+1, r11	; 0x01
				 break;
 416:	a8 82       	st	Y, r10
			}
			
			
			sonarTrigger();
 418:	5a c0       	rjmp	.+180    	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
 41a:	54 df       	rcall	.-344    	; 0x2c4 <_Z12sonarTriggerv>
 41c:	8f e1       	ldi	r24, 0x1F	; 31
 41e:	9e e4       	ldi	r25, 0x4E	; 78
 420:	01 97       	sbiw	r24, 0x01	; 1
 422:	f1 f7       	brne	.-4      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 424:	00 c0       	rjmp	.+0      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 426:	00 00       	nop
			_delay_ms(5);
			
			
			
			if(ICR5 < 3600){
 428:	f7 01       	movw	r30, r14
 42a:	80 81       	ld	r24, Z
 42c:	91 81       	ldd	r25, Z+1	; 0x01
 42e:	80 31       	cpi	r24, 0x10	; 16
 430:	9e 40       	sbci	r25, 0x0E	; 14
 432:	c0 f4       	brcc	.+48     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 434:	2f ef       	ldi	r18, 0xFF	; 255
 436:	89 ef       	ldi	r24, 0xF9	; 249
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	21 50       	subi	r18, 0x01	; 1
 43c:	80 40       	sbci	r24, 0x00	; 0
 43e:	90 40       	sbci	r25, 0x00	; 0
 440:	e1 f7       	brne	.-8      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 442:	00 c0       	rjmp	.+0      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 444:	00 00       	nop
				}
				
				
				ICR_last_value = ICR_current_value;*/
				_delay_ms(20);
				_ICR_last_value = true;
 446:	50 92 02 02 	sts	0x0202, r5	; 0x800202 <__data_end>
				
				if(_ICR_first_value){
 44a:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_ICR_first_value>
 44e:	88 23       	and	r24, r24
 450:	99 f1       	breq	.+102    	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
					
				ICR_first_value = OCR1A;
 452:	88 81       	ld	r24, Y
 454:	99 81       	ldd	r25, Y+1	; 0x01
 456:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <ICR_first_value+0x1>
 45a:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <ICR_first_value>
				_ICR_first_value = false;
 45e:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <_ICR_first_value>
 462:	2a c0       	rjmp	.+84     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
				
				}
			}
			else {
				
				if(_ICR_last_value){
 464:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__data_end>
 468:	88 23       	and	r24, r24
 46a:	21 f1       	breq	.+72     	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
					
					ICR_last_value = OCR1A;
 46c:	88 81       	ld	r24, Y
 46e:	99 81       	ldd	r25, Y+1	; 0x01
 470:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <ICR_last_value+0x1>
 474:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <ICR_last_value>
					while(1){
						
						OCR1A = ((ICR_last_value - ICR_first_value) / 2) + ICR_first_value;
 478:	20 91 05 02 	lds	r18, 0x0205	; 0x800205 <ICR_first_value>
 47c:	30 91 06 02 	lds	r19, 0x0206	; 0x800206 <ICR_first_value+0x1>
 480:	40 91 03 02 	lds	r20, 0x0203	; 0x800203 <ICR_last_value>
 484:	50 91 04 02 	lds	r21, 0x0204	; 0x800204 <ICR_last_value+0x1>
 488:	42 1b       	sub	r20, r18
 48a:	53 0b       	sbc	r21, r19
 48c:	ca 01       	movw	r24, r20
 48e:	99 23       	and	r25, r25
 490:	0c f4       	brge	.+2      	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
 492:	01 96       	adiw	r24, 0x01	; 1
 494:	95 95       	asr	r25
 496:	87 95       	ror	r24
 498:	82 0f       	add	r24, r18
 49a:	93 1f       	adc	r25, r19
 49c:	99 83       	std	Y+1, r25	; 0x01
 49e:	88 83       	st	Y, r24
						if(!(PINL & (1 << PINL5))){
 4a0:	f8 01       	movw	r30, r16
 4a2:	80 81       	ld	r24, Z
 4a4:	85 fd       	sbrc	r24, 5
 4a6:	e8 cf       	rjmp	.-48     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
							
							//PORTB = 0x00;
							
							OCR1A = 3080;
 4a8:	b9 82       	std	Y+1, r11	; 0x01
 4aa:	a8 82       	st	Y, r10
							startServo = false;
 4ac:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <startServo>
							break;
							
						}
					}
					_ICR_last_value = false;
 4b0:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <__data_end>
					
					
				}
				
				_ICR_first_value = true;
 4b4:	50 92 00 02 	sts	0x0200, r5	; 0x800200 <_ICR_first_value>
			}
			
			
			
			OCR1A = i;
 4b8:	99 82       	std	Y+1, r9	; 0x01
 4ba:	88 82       	st	Y, r8
			
			OCR1A = 1240;
			sonarTrigger();
			_delay_ms(500);
			//PORTB = 0xFF;
		for(int i = OCR1A; i < 5101; i+=7){
 4bc:	f7 e0       	ldi	r31, 0x07	; 7
 4be:	8f 0e       	add	r8, r31
 4c0:	91 1c       	adc	r9, r1
 4c2:	2d ee       	ldi	r18, 0xED	; 237
 4c4:	82 16       	cp	r8, r18
 4c6:	23 e1       	ldi	r18, 0x13	; 19
 4c8:	92 06       	cpc	r9, r18
 4ca:	0c f4       	brge	.+2      	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
 4cc:	9f cf       	rjmp	.-194    	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
			
			
		
			
		}
		startServo = false;
 4ce:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <startServo>
		
		
		
		
		
		if(!(PINL & (1 << PINL5))){
 4d2:	f8 01       	movw	r30, r16
 4d4:	80 81       	ld	r24, Z
 4d6:	85 fd       	sbrc	r24, 5
 4d8:	6a cf       	rjmp	.-300    	; 0x3ae <main+0xbe>
			
			//PORTB = 0x00;
		
		OCR1A = 3080;
 4da:	b9 82       	std	Y+1, r11	; 0x01
 4dc:	a8 82       	st	Y, r10
		startServo = false;
 4de:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <startServo>
 4e2:	63 cf       	rjmp	.-314    	; 0x3aa <main+0xba>

000004e4 <__divmodhi4>:
 4e4:	97 fb       	bst	r25, 7
 4e6:	07 2e       	mov	r0, r23
 4e8:	16 f4       	brtc	.+4      	; 0x4ee <__divmodhi4+0xa>
 4ea:	00 94       	com	r0
 4ec:	06 d0       	rcall	.+12     	; 0x4fa <__divmodhi4_neg1>
 4ee:	77 fd       	sbrc	r23, 7
 4f0:	08 d0       	rcall	.+16     	; 0x502 <__divmodhi4_neg2>
 4f2:	0b d0       	rcall	.+22     	; 0x50a <__udivmodhi4>
 4f4:	07 fc       	sbrc	r0, 7
 4f6:	05 d0       	rcall	.+10     	; 0x502 <__divmodhi4_neg2>
 4f8:	3e f4       	brtc	.+14     	; 0x508 <__divmodhi4_exit>

000004fa <__divmodhi4_neg1>:
 4fa:	90 95       	com	r25
 4fc:	81 95       	neg	r24
 4fe:	9f 4f       	sbci	r25, 0xFF	; 255
 500:	08 95       	ret

00000502 <__divmodhi4_neg2>:
 502:	70 95       	com	r23
 504:	61 95       	neg	r22
 506:	7f 4f       	sbci	r23, 0xFF	; 255

00000508 <__divmodhi4_exit>:
 508:	08 95       	ret

0000050a <__udivmodhi4>:
 50a:	aa 1b       	sub	r26, r26
 50c:	bb 1b       	sub	r27, r27
 50e:	51 e1       	ldi	r21, 0x11	; 17
 510:	07 c0       	rjmp	.+14     	; 0x520 <__udivmodhi4_ep>

00000512 <__udivmodhi4_loop>:
 512:	aa 1f       	adc	r26, r26
 514:	bb 1f       	adc	r27, r27
 516:	a6 17       	cp	r26, r22
 518:	b7 07       	cpc	r27, r23
 51a:	10 f0       	brcs	.+4      	; 0x520 <__udivmodhi4_ep>
 51c:	a6 1b       	sub	r26, r22
 51e:	b7 0b       	sbc	r27, r23

00000520 <__udivmodhi4_ep>:
 520:	88 1f       	adc	r24, r24
 522:	99 1f       	adc	r25, r25
 524:	5a 95       	dec	r21
 526:	a9 f7       	brne	.-22     	; 0x512 <__udivmodhi4_loop>
 528:	80 95       	com	r24
 52a:	90 95       	com	r25
 52c:	bc 01       	movw	r22, r24
 52e:	cd 01       	movw	r24, r26
 530:	08 95       	ret

00000532 <_exit>:
 532:	f8 94       	cli

00000534 <__stop_program>:
 534:	ff cf       	rjmp	.-2      	; 0x534 <__stop_program>
