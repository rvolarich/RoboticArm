
RoboticArm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800200  0000072c  000007c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000072c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000019  0080020a  0080020a  000007ca  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007ca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  0000083c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001071  00000000  00000000  00000894  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d72  00000000  00000000  00001905  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000585  00000000  00000000  00002677  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000010c  00000000  00000000  00002bfc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000701  00000000  00000000  00002d08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002cc  00000000  00000000  00003409  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  000036d5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3f c0       	rjmp	.+126    	; 0x124 <__vector_41>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	72 c0       	rjmp	.+228    	; 0x19e <__vector_46>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec e2       	ldi	r30, 0x2C	; 44
  fc:	f7 e0       	ldi	r31, 0x07	; 7
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	aa 30       	cpi	r26, 0x0A	; 10
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	aa e0       	ldi	r26, 0x0A	; 10
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a3 32       	cpi	r26, 0x23	; 35
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	12 d1       	rcall	.+548    	; 0x344 <main>
 120:	03 c3       	rjmp	.+1542   	; 0x728 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <__vector_41>:
int tents;
int ones;

// INTERRUPTS

ISR(TIMER4_CAPT_vect){
 124:	1f 92       	push	r1
 126:	0f 92       	push	r0
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	0f 92       	push	r0
 12c:	11 24       	eor	r1, r1
 12e:	0b b6       	in	r0, 0x3b	; 59
 130:	0f 92       	push	r0
 132:	8f 93       	push	r24
 134:	ef 93       	push	r30
 136:	ff 93       	push	r31
	
	
	TCCR5B |= 1 << CS51;
 138:	e1 e2       	ldi	r30, 0x21	; 33
 13a:	f1 e0       	ldi	r31, 0x01	; 1
 13c:	80 81       	ld	r24, Z
 13e:	82 60       	ori	r24, 0x02	; 2
 140:	80 83       	st	Z, r24
	//PORTB = 0x00;
}
 142:	ff 91       	pop	r31
 144:	ef 91       	pop	r30
 146:	8f 91       	pop	r24
 148:	0f 90       	pop	r0
 14a:	0b be       	out	0x3b, r0	; 59
 14c:	0f 90       	pop	r0
 14e:	0f be       	out	0x3f, r0	; 63
 150:	0f 90       	pop	r0
 152:	1f 90       	pop	r1
 154:	18 95       	reti

00000156 <_Z10USART_Initj>:
}
*/
void USART_Init(unsigned int ubrr){
	
	// set baud rate
	UBRR2H = (ubrr >> 8);
 156:	90 93 d5 00 	sts	0x00D5, r25	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
	UBRR2L = ubrr;
 15a:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
	
	// enable transmitter receiver
	UCSR2B |= (1 << TXEN2);
 15e:	e1 ed       	ldi	r30, 0xD1	; 209
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	80 81       	ld	r24, Z
 164:	88 60       	ori	r24, 0x08	; 8
 166:	80 83       	st	Z, r24
 168:	08 95       	ret

0000016a <_Z14USART_Transmith>:
	
}

void USART_Transmit(unsigned char data){
	
		while(!(UCSR2A & (1 << UDRE2)))
 16a:	90 91 d0 00 	lds	r25, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
 16e:	95 fd       	sbrc	r25, 5
 170:	05 c0       	rjmp	.+10     	; 0x17c <_Z14USART_Transmith+0x12>
 172:	e0 ed       	ldi	r30, 0xD0	; 208
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	90 81       	ld	r25, Z
 178:	95 ff       	sbrs	r25, 5
 17a:	fd cf       	rjmp	.-6      	; 0x176 <_Z14USART_Transmith+0xc>
		_delay_ms(0);
		UDR2 = data;
 17c:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
 180:	08 95       	ret

00000182 <_Z15USART_putstringPc>:
	TCCR5B &= ~(1 << CS51);
	TCNT5 = 0x00;
}


void USART_putstring(char* StringPtr){
 182:	cf 93       	push	r28
 184:	df 93       	push	r29
 186:	ec 01       	movw	r28, r24
	
	while(*StringPtr != 0x00){    
 188:	88 81       	ld	r24, Y
 18a:	88 23       	and	r24, r24
 18c:	29 f0       	breq	.+10     	; 0x198 <_Z15USART_putstringPc+0x16>
 18e:	21 96       	adiw	r28, 0x01	; 1
		USART_Transmit(*StringPtr);    
 190:	ec df       	rcall	.-40     	; 0x16a <_Z14USART_Transmith>
}


void USART_putstring(char* StringPtr){
	
	while(*StringPtr != 0x00){    
 192:	89 91       	ld	r24, Y+
 194:	81 11       	cpse	r24, r1
 196:	fc cf       	rjmp	.-8      	; 0x190 <_Z15USART_putstringPc+0xe>
		USART_Transmit(*StringPtr);    
		StringPtr++;}        
}
 198:	df 91       	pop	r29
 19a:	cf 91       	pop	r28
 19c:	08 95       	ret

0000019e <__vector_46>:
	
	TCCR5B |= 1 << CS51;
	//PORTB = 0x00;
}

ISR(TIMER5_CAPT_vect){
 19e:	1f 92       	push	r1
 1a0:	0f 92       	push	r0
 1a2:	0f b6       	in	r0, 0x3f	; 63
 1a4:	0f 92       	push	r0
 1a6:	11 24       	eor	r1, r1
 1a8:	0b b6       	in	r0, 0x3b	; 59
 1aa:	0f 92       	push	r0
 1ac:	2f 93       	push	r18
 1ae:	3f 93       	push	r19
 1b0:	4f 93       	push	r20
 1b2:	5f 93       	push	r21
 1b4:	6f 93       	push	r22
 1b6:	7f 93       	push	r23
 1b8:	8f 93       	push	r24
 1ba:	9f 93       	push	r25
 1bc:	af 93       	push	r26
 1be:	bf 93       	push	r27
 1c0:	cf 93       	push	r28
 1c2:	df 93       	push	r29
 1c4:	ef 93       	push	r30
 1c6:	ff 93       	push	r31
	
	//convert float to char array
	timeDelay = ICR5*0.0000005;
 1c8:	60 91 26 01 	lds	r22, 0x0126	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
 1cc:	70 91 27 01 	lds	r23, 0x0127	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	91 d1       	rcall	.+802    	; 0x4f8 <__floatunsisf>
 1d6:	2d eb       	ldi	r18, 0xBD	; 189
 1d8:	37 e3       	ldi	r19, 0x37	; 55
 1da:	46 e0       	ldi	r20, 0x06	; 6
 1dc:	55 e3       	ldi	r21, 0x35	; 53
 1de:	f2 d1       	rcall	.+996    	; 0x5c4 <__mulsf3>
 1e0:	60 93 14 02 	sts	0x0214, r22	; 0x800214 <timeDelay>
 1e4:	70 93 15 02 	sts	0x0215, r23	; 0x800215 <timeDelay+0x1>
 1e8:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <timeDelay+0x2>
 1ec:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <timeDelay+0x3>
	
	x = timeDelay *1000 * (345/2);
 1f0:	20 e0       	ldi	r18, 0x00	; 0
 1f2:	30 e0       	ldi	r19, 0x00	; 0
 1f4:	4a e7       	ldi	r20, 0x7A	; 122
 1f6:	54 e4       	ldi	r21, 0x44	; 68
 1f8:	e5 d1       	rcall	.+970    	; 0x5c4 <__mulsf3>
 1fa:	20 e0       	ldi	r18, 0x00	; 0
 1fc:	30 e0       	ldi	r19, 0x00	; 0
 1fe:	4c e2       	ldi	r20, 0x2C	; 44
 200:	53 e4       	ldi	r21, 0x43	; 67
 202:	e0 d1       	rcall	.+960    	; 0x5c4 <__mulsf3>
 204:	48 d1       	rcall	.+656    	; 0x496 <__fixsfsi>
 206:	fb 01       	movw	r30, r22
 208:	70 93 1a 02 	sts	0x021A, r23	; 0x80021a <x+0x1>
 20c:	60 93 19 02 	sts	0x0219, r22	; 0x800219 <x>
	tenthou = x / 10000;
 210:	cb 01       	movw	r24, r22
 212:	60 e1       	ldi	r22, 0x10	; 16
 214:	77 e2       	ldi	r23, 0x27	; 39
 216:	61 d2       	rcall	.+1218   	; 0x6da <__divmodhi4>
 218:	46 2f       	mov	r20, r22
 21a:	60 93 12 02 	sts	0x0212, r22	; 0x800212 <tenthou>
 21e:	70 93 13 02 	sts	0x0213, r23	; 0x800213 <tenthou+0x1>
	thou = (x % 10000) / 1000;
 222:	c8 ee       	ldi	r28, 0xE8	; 232
 224:	d3 e0       	ldi	r29, 0x03	; 3
 226:	be 01       	movw	r22, r28
 228:	58 d2       	rcall	.+1200   	; 0x6da <__divmodhi4>
 22a:	36 2f       	mov	r19, r22
 22c:	60 93 10 02 	sts	0x0210, r22	; 0x800210 <thou>
 230:	70 93 11 02 	sts	0x0211, r23	; 0x800211 <thou+0x1>
	hunds = (x % 1000) / 100;
 234:	cf 01       	movw	r24, r30
 236:	be 01       	movw	r22, r28
 238:	50 d2       	rcall	.+1184   	; 0x6da <__divmodhi4>
 23a:	c4 e6       	ldi	r28, 0x64	; 100
 23c:	d0 e0       	ldi	r29, 0x00	; 0
 23e:	be 01       	movw	r22, r28
 240:	4c d2       	rcall	.+1176   	; 0x6da <__divmodhi4>
 242:	26 2f       	mov	r18, r22
 244:	60 93 0e 02 	sts	0x020E, r22	; 0x80020e <hunds>
 248:	70 93 0f 02 	sts	0x020F, r23	; 0x80020f <hunds+0x1>
	tents = (x % 100) / 10;
 24c:	cf 01       	movw	r24, r30
 24e:	be 01       	movw	r22, r28
 250:	44 d2       	rcall	.+1160   	; 0x6da <__divmodhi4>
 252:	6a e0       	ldi	r22, 0x0A	; 10
 254:	70 e0       	ldi	r23, 0x00	; 0
 256:	41 d2       	rcall	.+1154   	; 0x6da <__divmodhi4>
 258:	60 93 0c 02 	sts	0x020C, r22	; 0x80020c <tents>
 25c:	70 93 0d 02 	sts	0x020D, r23	; 0x80020d <tents+0x1>
 260:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <__data_end>
	ones = (x % 100) % 10;
 264:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <__data_end+0x1>
 268:	eb e1       	ldi	r30, 0x1B	; 27
 26a:	f2 e0       	ldi	r31, 0x02	; 2
	
	distance[0]= tenthou + 48;
 26c:	40 5d       	subi	r20, 0xD0	; 208
 26e:	40 83       	st	Z, r20
 270:	30 5d       	subi	r19, 0xD0	; 208
 272:	31 83       	std	Z+1, r19	; 0x01
	distance[1]= thou + 48;
 274:	9e e2       	ldi	r25, 0x2E	; 46
 276:	92 83       	std	Z+2, r25	; 0x02
	distance[2]= '.';
 278:	20 5d       	subi	r18, 0xD0	; 208
 27a:	23 83       	std	Z+3, r18	; 0x03
	distance[3]= hunds + 48;
 27c:	60 5d       	subi	r22, 0xD0	; 208
	distance[4]= tents + 48;
 27e:	64 83       	std	Z+4, r22	; 0x04
	distance[5]= ones + 48;
 280:	80 5d       	subi	r24, 0xD0	; 208
 282:	85 83       	std	Z+5, r24	; 0x05
	distance[6]= 'm';
 284:	8d e6       	ldi	r24, 0x6D	; 109
 286:	86 83       	std	Z+6, r24	; 0x06
	distance[7]= 0x00;
 288:	17 82       	std	Z+7, r1	; 0x07
	
	USART_putstring(String);
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	92 e0       	ldi	r25, 0x02	; 2
 28e:	79 df       	rcall	.-270    	; 0x182 <_Z15USART_putstringPc>
 290:	8b e1       	ldi	r24, 0x1B	; 27
	USART_putstring(distance);
 292:	92 e0       	ldi	r25, 0x02	; 2
 294:	76 df       	rcall	.-276    	; 0x182 <_Z15USART_putstringPc>
 296:	e1 e2       	ldi	r30, 0x21	; 33
 298:	f1 e0       	ldi	r31, 0x01	; 1
	
	//PORTB = 0xff;
	TCCR5B &= ~(1 << CS51);
 29a:	80 81       	ld	r24, Z
 29c:	8d 7f       	andi	r24, 0xFD	; 253
 29e:	80 83       	st	Z, r24
 2a0:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <__TEXT_REGION_LENGTH__+0x700125>
	TCNT5 = 0x00;
 2a4:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
 2a8:	ff 91       	pop	r31
 2aa:	ef 91       	pop	r30
}
 2ac:	df 91       	pop	r29
 2ae:	cf 91       	pop	r28
 2b0:	bf 91       	pop	r27
 2b2:	af 91       	pop	r26
 2b4:	9f 91       	pop	r25
 2b6:	8f 91       	pop	r24
 2b8:	7f 91       	pop	r23
 2ba:	6f 91       	pop	r22
 2bc:	5f 91       	pop	r21
 2be:	4f 91       	pop	r20
 2c0:	3f 91       	pop	r19
 2c2:	2f 91       	pop	r18
 2c4:	0f 90       	pop	r0
 2c6:	0b be       	out	0x3b, r0	; 59
 2c8:	0f 90       	pop	r0
 2ca:	0f be       	out	0x3f, r0	; 63
 2cc:	0f 90       	pop	r0
 2ce:	1f 90       	pop	r1
 2d0:	18 95       	reti

000002d2 <_Z10timer_initv>:
 2d2:	e0 e8       	ldi	r30, 0x80	; 128
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
	
}*/

void timer_init(){
	
	TCCR1A |= 1 << WGM11 | 1 << COM1A1;
 2d6:	80 81       	ld	r24, Z
 2d8:	82 68       	ori	r24, 0x82	; 130
 2da:	80 83       	st	Z, r24
	TCCR1B |= 1 << WGM13 | 1 << WGM12 | 1 << CS11; 
 2dc:	e1 e8       	ldi	r30, 0x81	; 129
 2de:	f0 e0       	ldi	r31, 0x00	; 0
 2e0:	80 81       	ld	r24, Z
 2e2:	8a 61       	ori	r24, 0x1A	; 26
 2e4:	80 83       	st	Z, r24
	ICR1 = 15999;
 2e6:	8f e7       	ldi	r24, 0x7F	; 127
 2e8:	9e e3       	ldi	r25, 0x3E	; 62
 2ea:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x700087>
 2ee:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x700086>
	OCR1A = 3080;
 2f2:	88 e0       	ldi	r24, 0x08	; 8
 2f4:	9c e0       	ldi	r25, 0x0C	; 12
 2f6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 2fa:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
 2fe:	08 95       	ret

00000300 <_Z11start_timerii>:
}

void start_timer(int timer, int prescaler){
	
	switch(timer){															// reset counters and prescaler
 300:	00 97       	sbiw	r24, 0x00	; 0
 302:	19 f0       	breq	.+6      	; 0x30a <_Z11start_timerii+0xa>
 304:	05 97       	sbiw	r24, 0x05	; 5
 306:	31 f0       	breq	.+12     	; 0x314 <_Z11start_timerii+0x14>
 308:	0e c0       	rjmp	.+28     	; 0x326 <_Z11start_timerii+0x26>
		
	  case 0:	TCNT0 = 0x00;
 30a:	16 bc       	out	0x26, r1	; 38
				TCCR0B &= ~(1 << CS00) & ~(1 << CS01) & ~(1 << CS02);
 30c:	85 b5       	in	r24, 0x25	; 37
 30e:	88 7f       	andi	r24, 0xF8	; 248
 310:	85 bd       	out	0x25, r24	; 37
				break;
 312:	09 c0       	rjmp	.+18     	; 0x326 <_Z11start_timerii+0x26>
				
	  case 5:	TCNT5 = 0x00;
 314:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <__TEXT_REGION_LENGTH__+0x700125>
 318:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
				TCCR5B &= ~(1 << CS50) & ~(1 << CS51) & ~(1 << CS52);
 31c:	e1 e2       	ldi	r30, 0x21	; 33
 31e:	f1 e0       	ldi	r31, 0x01	; 1
 320:	80 81       	ld	r24, Z
 322:	88 7f       	andi	r24, 0xF8	; 248
 324:	80 83       	st	Z, r24
				break;
	}
	
												
	
	switch(prescaler){														// set prescaler
 326:	61 15       	cp	r22, r1
 328:	71 05       	cpc	r23, r1
 32a:	21 f0       	breq	.+8      	; 0x334 <_Z11start_timerii+0x34>
 32c:	61 15       	cp	r22, r1
 32e:	71 40       	sbci	r23, 0x01	; 1
 330:	29 f0       	breq	.+10     	; 0x33c <_Z11start_timerii+0x3c>
 332:	08 95       	ret
		
	  case   0: TCCR0B |= 1 << CS00;
 334:	85 b5       	in	r24, 0x25	; 37
 336:	81 60       	ori	r24, 0x01	; 1
 338:	85 bd       	out	0x25, r24	; 37
				break;
 33a:	08 95       	ret
	  case 256: TCCR0B |= 1 << CS02;
 33c:	85 b5       	in	r24, 0x25	; 37
 33e:	84 60       	ori	r24, 0x04	; 4
 340:	85 bd       	out	0x25, r24	; 37
 342:	08 95       	ret

00000344 <main>:

int main(void)

{	
	// global interrupt enable
	sei();	
 344:	78 94       	sei
				
	DDRB = 0xff;
 346:	8f ef       	ldi	r24, 0xFF	; 255
 348:	84 b9       	out	0x04, r24	; 4
	DDRL |= 1 << 6 | 1 << 2;		 //set trigger pin PL6 as output
 34a:	ca e0       	ldi	r28, 0x0A	; 10
 34c:	d1 e0       	ldi	r29, 0x01	; 1
 34e:	88 81       	ld	r24, Y
 350:	84 64       	ori	r24, 0x44	; 68
 352:	88 83       	st	Y, r24
	
	PORTB = 0x00;
 354:	15 b8       	out	0x05, r1	; 5
	PORTL |= (1 << 5) | (1 << 7);
 356:	eb e0       	ldi	r30, 0x0B	; 11
 358:	f1 e0       	ldi	r31, 0x01	; 1
 35a:	80 81       	ld	r24, Z
 35c:	80 6a       	ori	r24, 0xA0	; 160
 35e:	80 83       	st	Z, r24
	timer_init();
 360:	b8 df       	rcall	.-144    	; 0x2d2 <_Z10timer_initv>
	DDRL &=~(1 << DDL7) & ~(1 << DDL5);
 362:	88 81       	ld	r24, Y
 364:	8f 75       	andi	r24, 0x5F	; 95
 366:	88 83       	st	Y, r24
	//PORTL = 0x00;
	MCUCR &=~ (1 << PUD);
 368:	85 b7       	in	r24, 0x35	; 53
 36a:	8f 7e       	andi	r24, 0xEF	; 239
 36c:	85 bf       	out	0x35, r24	; 53
	USART_Init(UBR_9600);
 36e:	87 e6       	ldi	r24, 0x67	; 103
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	f1 de       	rcall	.-542    	; 0x156 <_Z10USART_Initj>
	
	//set PJ1 as input
	DDRJ &=~(1 << PJ1);
 374:	e4 e0       	ldi	r30, 0x04	; 4
 376:	f1 e0       	ldi	r31, 0x01	; 1
 378:	80 81       	ld	r24, Z
 37a:	8d 7f       	andi	r24, 0xFD	; 253
 37c:	80 83       	st	Z, r24
	
	//Pin on change interrupt Reg:PCMSK1, Pin:PCINT10(PJ1), bit 2
	PCMSK1 |= (1 << PCINT10);
 37e:	ec e6       	ldi	r30, 0x6C	; 108
 380:	f0 e0       	ldi	r31, 0x00	; 0
 382:	80 81       	ld	r24, Z
 384:	84 60       	ori	r24, 0x04	; 4
 386:	80 83       	st	Z, r24
	//Set PCIE1, bit 1
	//PCICR |= (1 << PCIE1);
	
	//Input Capture pin ( ICP4, PL0, AMega pin 49 ) edge select setup
	//TCCR4B ICES4 bit 6 - input capture edge select - 1 rising
	TCCR4B |= (1 << ICES4);
 388:	e1 ea       	ldi	r30, 0xA1	; 161
 38a:	f0 e0       	ldi	r31, 0x00	; 0
 38c:	80 81       	ld	r24, Z
 38e:	80 64       	ori	r24, 0x40	; 64
 390:	80 83       	st	Z, r24
	
	//Input Capture pin ( ICP5, PL1, AMega pin 48 ) edge select setup
	//TCCR5B ICES5 bit 6 - input capture edge select - 0 falling
	
	//Input Capture interrupt enable - TIMSK4 (input capture mask register), ICIE4, bit 5
	TIMSK4 |= (1 << ICIE4);
 392:	e2 e7       	ldi	r30, 0x72	; 114
 394:	f0 e0       	ldi	r31, 0x00	; 0
 396:	80 81       	ld	r24, Z
 398:	80 62       	ori	r24, 0x20	; 32
 39a:	80 83       	st	Z, r24
	
	//Input Capture interrupt enable - TIMSK5 (input capture mask register), ICIE5, bit 5
	TIMSK5 |= (1 << ICIE5);
 39c:	e3 e7       	ldi	r30, 0x73	; 115
 39e:	f0 e0       	ldi	r31, 0x00	; 0
 3a0:	80 81       	ld	r24, Z
 3a2:	80 62       	ori	r24, 0x20	; 32
 3a4:	80 83       	st	Z, r24
		//PINL |= (1 << PINL2);
		
		//OCR1A = 5100;
		
		
		if(!(PINL & (1 << PINL7))) startServo = true;
 3a6:	0f 2e       	mov	r0, r31
 3a8:	f9 e0       	ldi	r31, 0x09	; 9
 3aa:	af 2e       	mov	r10, r31
 3ac:	bb 24       	eor	r11, r11
 3ae:	b3 94       	inc	r11
 3b0:	f0 2d       	mov	r31, r0
			
			
		if(startServo){
			
			OCR1A = 1240;
 3b2:	08 e8       	ldi	r16, 0x88	; 136
 3b4:	10 e0       	ldi	r17, 0x00	; 0
 3b6:	0f 2e       	mov	r0, r31
 3b8:	f8 ed       	ldi	r31, 0xD8	; 216
 3ba:	cf 2e       	mov	r12, r31
 3bc:	f4 e0       	ldi	r31, 0x04	; 4
 3be:	df 2e       	mov	r13, r31
 3c0:	f0 2d       	mov	r31, r0
		for(int i = OCR1A; i < 5101; i++){
			
			if(!(PINL & (1 << PINL5))){
				
				 startServo = false; 
				 OCR1A = 3080;
 3c2:	0f 2e       	mov	r0, r31
 3c4:	f8 e0       	ldi	r31, 0x08	; 8
 3c6:	ef 2e       	mov	r14, r31
 3c8:	fc e0       	ldi	r31, 0x0C	; 12
 3ca:	ff 2e       	mov	r15, r31
 3cc:	f0 2d       	mov	r31, r0
		//PINL |= (1 << PINL2);
		
		//OCR1A = 5100;
		
		
		if(!(PINL & (1 << PINL7))) startServo = true;
 3ce:	99 24       	eor	r9, r9
 3d0:	93 94       	inc	r9
		
		
		start_timer(0, 256);
		while(TCNT0 < 1)			// delay 12micro
		{
			PORTL |= 1 << 6;	// start trigger
 3d2:	cb e0       	ldi	r28, 0x0B	; 11
 3d4:	d1 e0       	ldi	r29, 0x01	; 1
		//PINL |= (1 << PINL2);
		
		//OCR1A = 5100;
		
		
		if(!(PINL & (1 << PINL7))) startServo = true;
 3d6:	f5 01       	movw	r30, r10
 3d8:	80 81       	ld	r24, Z
 3da:	88 23       	and	r24, r24
 3dc:	1c f0       	brlt	.+6      	; 0x3e4 <main+0xa0>
 3de:	90 92 18 02 	sts	0x0218, r9	; 0x800218 <startServo>
 3e2:	04 c0       	rjmp	.+8      	; 0x3ec <main+0xa8>
			
			
		if(startServo){
 3e4:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <startServo>
 3e8:	88 23       	and	r24, r24
 3ea:	71 f1       	breq	.+92     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
			
			OCR1A = 1240;
 3ec:	f8 01       	movw	r30, r16
 3ee:	d1 82       	std	Z+1, r13	; 0x01
 3f0:	c0 82       	st	Z, r12
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3f2:	ff ef       	ldi	r31, 0xFF	; 255
 3f4:	23 ec       	ldi	r18, 0xC3	; 195
 3f6:	89 e0       	ldi	r24, 0x09	; 9
 3f8:	f1 50       	subi	r31, 0x01	; 1
 3fa:	20 40       	sbci	r18, 0x00	; 0
 3fc:	80 40       	sbci	r24, 0x00	; 0
 3fe:	e1 f7       	brne	.-8      	; 0x3f8 <main+0xb4>
 400:	00 c0       	rjmp	.+0      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 402:	00 00       	nop
			_delay_ms(200);
			
		for(int i = OCR1A; i < 5101; i++){
 404:	f8 01       	movw	r30, r16
 406:	80 81       	ld	r24, Z
 408:	91 81       	ldd	r25, Z+1	; 0x01
 40a:	8d 3e       	cpi	r24, 0xED	; 237
 40c:	f3 e1       	ldi	r31, 0x13	; 19
 40e:	9f 07       	cpc	r25, r31
 410:	dc f4       	brge	.+54     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
			
			if(!(PINL & (1 << PINL5))){
 412:	f5 01       	movw	r30, r10
 414:	20 81       	ld	r18, Z
 416:	25 ff       	sbrs	r18, 5
 418:	05 c0       	rjmp	.+10     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 41a:	08 c0       	rjmp	.+16     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 41c:	f5 01       	movw	r30, r10
 41e:	20 81       	ld	r18, Z
 420:	25 fd       	sbrc	r18, 5
 422:	04 c0       	rjmp	.+8      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
				
				 startServo = false; 
				 OCR1A = 3080;
 424:	f8 01       	movw	r30, r16
 426:	f1 82       	std	Z+1, r15	; 0x01
 428:	e0 82       	st	Z, r14
				 break;
 42a:	0e c0       	rjmp	.+28     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
			}
			
			
			
			OCR1A = i;
 42c:	f8 01       	movw	r30, r16
 42e:	91 83       	std	Z+1, r25	; 0x01
 430:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 432:	ef ee       	ldi	r30, 0xEF	; 239
 434:	f0 e0       	ldi	r31, 0x00	; 0
 436:	31 97       	sbiw	r30, 0x01	; 1
 438:	f1 f7       	brne	.-4      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 43a:	00 c0       	rjmp	.+0      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 43c:	00 00       	nop
		if(startServo){
			
			OCR1A = 1240;
			_delay_ms(200);
			
		for(int i = OCR1A; i < 5101; i++){
 43e:	01 96       	adiw	r24, 0x01	; 1
 440:	8d 3e       	cpi	r24, 0xED	; 237
 442:	f3 e1       	ldi	r31, 0x13	; 19
 444:	9f 07       	cpc	r25, r31
 446:	51 f7       	brne	.-44     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
		
			
		}
		
		}
		startServo = false;
 448:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <startServo>
		
		
		
		
		
		if(!(PINL & (1 << PINL5))){
 44c:	f5 01       	movw	r30, r10
 44e:	80 81       	ld	r24, Z
 450:	85 fd       	sbrc	r24, 5
 452:	06 c0       	rjmp	.+12     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
			
			PORTB = 0x00;
 454:	15 b8       	out	0x05, r1	; 5
		
		OCR1A = 3080;
 456:	f8 01       	movw	r30, r16
 458:	f1 82       	std	Z+1, r15	; 0x01
 45a:	e0 82       	st	Z, r14
		startServo = false;
 45c:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <startServo>
		/*TCNT5 = 0x00;				//reset timer 5
		TCNT0 = 0x00;				//reset timer 0*/
		/*PORTL |= 1 << 6;*/			// fire trigger
		
		
		start_timer(0, 256);
 460:	60 e0       	ldi	r22, 0x00	; 0
 462:	71 e0       	ldi	r23, 0x01	; 1
 464:	80 e0       	ldi	r24, 0x00	; 0
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	4b df       	rcall	.-362    	; 0x300 <_Z11start_timerii>
		while(TCNT0 < 1)			// delay 12micro
 46a:	86 b5       	in	r24, 0x26	; 38
 46c:	81 11       	cpse	r24, r1
 46e:	06 c0       	rjmp	.+12     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
		{
			PORTL |= 1 << 6;	// start trigger
 470:	88 81       	ld	r24, Y
 472:	80 64       	ori	r24, 0x40	; 64
 474:	88 83       	st	Y, r24
		TCNT0 = 0x00;				//reset timer 0*/
		/*PORTL |= 1 << 6;*/			// fire trigger
		
		
		start_timer(0, 256);
		while(TCNT0 < 1)			// delay 12micro
 476:	86 b5       	in	r24, 0x26	; 38
 478:	88 23       	and	r24, r24
 47a:	d1 f3       	breq	.-12     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
		{
			PORTL |= 1 << 6;	// start trigger
		}
		PORTL &=~(1 << 6);		// shut trigger	
 47c:	88 81       	ld	r24, Y
 47e:	8f 7b       	andi	r24, 0xBF	; 191
 480:	88 83       	st	Y, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 482:	ff ef       	ldi	r31, 0xFF	; 255
 484:	25 ea       	ldi	r18, 0xA5	; 165
 486:	8e e0       	ldi	r24, 0x0E	; 14
 488:	f1 50       	subi	r31, 0x01	; 1
 48a:	20 40       	sbci	r18, 0x00	; 0
 48c:	80 40       	sbci	r24, 0x00	; 0
 48e:	e1 f7       	brne	.-8      	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 490:	00 c0       	rjmp	.+0      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 492:	00 00       	nop
 494:	a0 cf       	rjmp	.-192    	; 0x3d6 <main+0x92>

00000496 <__fixsfsi>:
 496:	04 d0       	rcall	.+8      	; 0x4a0 <__fixunssfsi>
 498:	68 94       	set
 49a:	b1 11       	cpse	r27, r1
 49c:	8d c0       	rjmp	.+282    	; 0x5b8 <__fp_szero>
 49e:	08 95       	ret

000004a0 <__fixunssfsi>:
 4a0:	70 d0       	rcall	.+224    	; 0x582 <__fp_splitA>
 4a2:	88 f0       	brcs	.+34     	; 0x4c6 <__fixunssfsi+0x26>
 4a4:	9f 57       	subi	r25, 0x7F	; 127
 4a6:	90 f0       	brcs	.+36     	; 0x4cc <__fixunssfsi+0x2c>
 4a8:	b9 2f       	mov	r27, r25
 4aa:	99 27       	eor	r25, r25
 4ac:	b7 51       	subi	r27, 0x17	; 23
 4ae:	a0 f0       	brcs	.+40     	; 0x4d8 <__fixunssfsi+0x38>
 4b0:	d1 f0       	breq	.+52     	; 0x4e6 <__fixunssfsi+0x46>
 4b2:	66 0f       	add	r22, r22
 4b4:	77 1f       	adc	r23, r23
 4b6:	88 1f       	adc	r24, r24
 4b8:	99 1f       	adc	r25, r25
 4ba:	1a f0       	brmi	.+6      	; 0x4c2 <__fixunssfsi+0x22>
 4bc:	ba 95       	dec	r27
 4be:	c9 f7       	brne	.-14     	; 0x4b2 <__fixunssfsi+0x12>
 4c0:	12 c0       	rjmp	.+36     	; 0x4e6 <__fixunssfsi+0x46>
 4c2:	b1 30       	cpi	r27, 0x01	; 1
 4c4:	81 f0       	breq	.+32     	; 0x4e6 <__fixunssfsi+0x46>
 4c6:	77 d0       	rcall	.+238    	; 0x5b6 <__fp_zero>
 4c8:	b1 e0       	ldi	r27, 0x01	; 1
 4ca:	08 95       	ret
 4cc:	74 c0       	rjmp	.+232    	; 0x5b6 <__fp_zero>
 4ce:	67 2f       	mov	r22, r23
 4d0:	78 2f       	mov	r23, r24
 4d2:	88 27       	eor	r24, r24
 4d4:	b8 5f       	subi	r27, 0xF8	; 248
 4d6:	39 f0       	breq	.+14     	; 0x4e6 <__fixunssfsi+0x46>
 4d8:	b9 3f       	cpi	r27, 0xF9	; 249
 4da:	cc f3       	brlt	.-14     	; 0x4ce <__fixunssfsi+0x2e>
 4dc:	86 95       	lsr	r24
 4de:	77 95       	ror	r23
 4e0:	67 95       	ror	r22
 4e2:	b3 95       	inc	r27
 4e4:	d9 f7       	brne	.-10     	; 0x4dc <__fixunssfsi+0x3c>
 4e6:	3e f4       	brtc	.+14     	; 0x4f6 <__fixunssfsi+0x56>
 4e8:	90 95       	com	r25
 4ea:	80 95       	com	r24
 4ec:	70 95       	com	r23
 4ee:	61 95       	neg	r22
 4f0:	7f 4f       	sbci	r23, 0xFF	; 255
 4f2:	8f 4f       	sbci	r24, 0xFF	; 255
 4f4:	9f 4f       	sbci	r25, 0xFF	; 255
 4f6:	08 95       	ret

000004f8 <__floatunsisf>:
 4f8:	e8 94       	clt
 4fa:	09 c0       	rjmp	.+18     	; 0x50e <__floatsisf+0x12>

000004fc <__floatsisf>:
 4fc:	97 fb       	bst	r25, 7
 4fe:	3e f4       	brtc	.+14     	; 0x50e <__floatsisf+0x12>
 500:	90 95       	com	r25
 502:	80 95       	com	r24
 504:	70 95       	com	r23
 506:	61 95       	neg	r22
 508:	7f 4f       	sbci	r23, 0xFF	; 255
 50a:	8f 4f       	sbci	r24, 0xFF	; 255
 50c:	9f 4f       	sbci	r25, 0xFF	; 255
 50e:	99 23       	and	r25, r25
 510:	a9 f0       	breq	.+42     	; 0x53c <__floatsisf+0x40>
 512:	f9 2f       	mov	r31, r25
 514:	96 e9       	ldi	r25, 0x96	; 150
 516:	bb 27       	eor	r27, r27
 518:	93 95       	inc	r25
 51a:	f6 95       	lsr	r31
 51c:	87 95       	ror	r24
 51e:	77 95       	ror	r23
 520:	67 95       	ror	r22
 522:	b7 95       	ror	r27
 524:	f1 11       	cpse	r31, r1
 526:	f8 cf       	rjmp	.-16     	; 0x518 <__floatsisf+0x1c>
 528:	fa f4       	brpl	.+62     	; 0x568 <__floatsisf+0x6c>
 52a:	bb 0f       	add	r27, r27
 52c:	11 f4       	brne	.+4      	; 0x532 <__floatsisf+0x36>
 52e:	60 ff       	sbrs	r22, 0
 530:	1b c0       	rjmp	.+54     	; 0x568 <__floatsisf+0x6c>
 532:	6f 5f       	subi	r22, 0xFF	; 255
 534:	7f 4f       	sbci	r23, 0xFF	; 255
 536:	8f 4f       	sbci	r24, 0xFF	; 255
 538:	9f 4f       	sbci	r25, 0xFF	; 255
 53a:	16 c0       	rjmp	.+44     	; 0x568 <__floatsisf+0x6c>
 53c:	88 23       	and	r24, r24
 53e:	11 f0       	breq	.+4      	; 0x544 <__floatsisf+0x48>
 540:	96 e9       	ldi	r25, 0x96	; 150
 542:	11 c0       	rjmp	.+34     	; 0x566 <__floatsisf+0x6a>
 544:	77 23       	and	r23, r23
 546:	21 f0       	breq	.+8      	; 0x550 <__floatsisf+0x54>
 548:	9e e8       	ldi	r25, 0x8E	; 142
 54a:	87 2f       	mov	r24, r23
 54c:	76 2f       	mov	r23, r22
 54e:	05 c0       	rjmp	.+10     	; 0x55a <__floatsisf+0x5e>
 550:	66 23       	and	r22, r22
 552:	71 f0       	breq	.+28     	; 0x570 <__floatsisf+0x74>
 554:	96 e8       	ldi	r25, 0x86	; 134
 556:	86 2f       	mov	r24, r22
 558:	70 e0       	ldi	r23, 0x00	; 0
 55a:	60 e0       	ldi	r22, 0x00	; 0
 55c:	2a f0       	brmi	.+10     	; 0x568 <__floatsisf+0x6c>
 55e:	9a 95       	dec	r25
 560:	66 0f       	add	r22, r22
 562:	77 1f       	adc	r23, r23
 564:	88 1f       	adc	r24, r24
 566:	da f7       	brpl	.-10     	; 0x55e <__floatsisf+0x62>
 568:	88 0f       	add	r24, r24
 56a:	96 95       	lsr	r25
 56c:	87 95       	ror	r24
 56e:	97 f9       	bld	r25, 7
 570:	08 95       	ret

00000572 <__fp_split3>:
 572:	57 fd       	sbrc	r21, 7
 574:	90 58       	subi	r25, 0x80	; 128
 576:	44 0f       	add	r20, r20
 578:	55 1f       	adc	r21, r21
 57a:	59 f0       	breq	.+22     	; 0x592 <__fp_splitA+0x10>
 57c:	5f 3f       	cpi	r21, 0xFF	; 255
 57e:	71 f0       	breq	.+28     	; 0x59c <__fp_splitA+0x1a>
 580:	47 95       	ror	r20

00000582 <__fp_splitA>:
 582:	88 0f       	add	r24, r24
 584:	97 fb       	bst	r25, 7
 586:	99 1f       	adc	r25, r25
 588:	61 f0       	breq	.+24     	; 0x5a2 <__fp_splitA+0x20>
 58a:	9f 3f       	cpi	r25, 0xFF	; 255
 58c:	79 f0       	breq	.+30     	; 0x5ac <__fp_splitA+0x2a>
 58e:	87 95       	ror	r24
 590:	08 95       	ret
 592:	12 16       	cp	r1, r18
 594:	13 06       	cpc	r1, r19
 596:	14 06       	cpc	r1, r20
 598:	55 1f       	adc	r21, r21
 59a:	f2 cf       	rjmp	.-28     	; 0x580 <__fp_split3+0xe>
 59c:	46 95       	lsr	r20
 59e:	f1 df       	rcall	.-30     	; 0x582 <__fp_splitA>
 5a0:	08 c0       	rjmp	.+16     	; 0x5b2 <__fp_splitA+0x30>
 5a2:	16 16       	cp	r1, r22
 5a4:	17 06       	cpc	r1, r23
 5a6:	18 06       	cpc	r1, r24
 5a8:	99 1f       	adc	r25, r25
 5aa:	f1 cf       	rjmp	.-30     	; 0x58e <__fp_splitA+0xc>
 5ac:	86 95       	lsr	r24
 5ae:	71 05       	cpc	r23, r1
 5b0:	61 05       	cpc	r22, r1
 5b2:	08 94       	sec
 5b4:	08 95       	ret

000005b6 <__fp_zero>:
 5b6:	e8 94       	clt

000005b8 <__fp_szero>:
 5b8:	bb 27       	eor	r27, r27
 5ba:	66 27       	eor	r22, r22
 5bc:	77 27       	eor	r23, r23
 5be:	cb 01       	movw	r24, r22
 5c0:	97 f9       	bld	r25, 7
 5c2:	08 95       	ret

000005c4 <__mulsf3>:
 5c4:	0b d0       	rcall	.+22     	; 0x5dc <__mulsf3x>
 5c6:	78 c0       	rjmp	.+240    	; 0x6b8 <__fp_round>
 5c8:	69 d0       	rcall	.+210    	; 0x69c <__fp_pscA>
 5ca:	28 f0       	brcs	.+10     	; 0x5d6 <__mulsf3+0x12>
 5cc:	6e d0       	rcall	.+220    	; 0x6aa <__fp_pscB>
 5ce:	18 f0       	brcs	.+6      	; 0x5d6 <__mulsf3+0x12>
 5d0:	95 23       	and	r25, r21
 5d2:	09 f0       	breq	.+2      	; 0x5d6 <__mulsf3+0x12>
 5d4:	5a c0       	rjmp	.+180    	; 0x68a <__fp_inf>
 5d6:	5f c0       	rjmp	.+190    	; 0x696 <__fp_nan>
 5d8:	11 24       	eor	r1, r1
 5da:	ee cf       	rjmp	.-36     	; 0x5b8 <__fp_szero>

000005dc <__mulsf3x>:
 5dc:	ca df       	rcall	.-108    	; 0x572 <__fp_split3>
 5de:	a0 f3       	brcs	.-24     	; 0x5c8 <__mulsf3+0x4>

000005e0 <__mulsf3_pse>:
 5e0:	95 9f       	mul	r25, r21
 5e2:	d1 f3       	breq	.-12     	; 0x5d8 <__mulsf3+0x14>
 5e4:	95 0f       	add	r25, r21
 5e6:	50 e0       	ldi	r21, 0x00	; 0
 5e8:	55 1f       	adc	r21, r21
 5ea:	62 9f       	mul	r22, r18
 5ec:	f0 01       	movw	r30, r0
 5ee:	72 9f       	mul	r23, r18
 5f0:	bb 27       	eor	r27, r27
 5f2:	f0 0d       	add	r31, r0
 5f4:	b1 1d       	adc	r27, r1
 5f6:	63 9f       	mul	r22, r19
 5f8:	aa 27       	eor	r26, r26
 5fa:	f0 0d       	add	r31, r0
 5fc:	b1 1d       	adc	r27, r1
 5fe:	aa 1f       	adc	r26, r26
 600:	64 9f       	mul	r22, r20
 602:	66 27       	eor	r22, r22
 604:	b0 0d       	add	r27, r0
 606:	a1 1d       	adc	r26, r1
 608:	66 1f       	adc	r22, r22
 60a:	82 9f       	mul	r24, r18
 60c:	22 27       	eor	r18, r18
 60e:	b0 0d       	add	r27, r0
 610:	a1 1d       	adc	r26, r1
 612:	62 1f       	adc	r22, r18
 614:	73 9f       	mul	r23, r19
 616:	b0 0d       	add	r27, r0
 618:	a1 1d       	adc	r26, r1
 61a:	62 1f       	adc	r22, r18
 61c:	83 9f       	mul	r24, r19
 61e:	a0 0d       	add	r26, r0
 620:	61 1d       	adc	r22, r1
 622:	22 1f       	adc	r18, r18
 624:	74 9f       	mul	r23, r20
 626:	33 27       	eor	r19, r19
 628:	a0 0d       	add	r26, r0
 62a:	61 1d       	adc	r22, r1
 62c:	23 1f       	adc	r18, r19
 62e:	84 9f       	mul	r24, r20
 630:	60 0d       	add	r22, r0
 632:	21 1d       	adc	r18, r1
 634:	82 2f       	mov	r24, r18
 636:	76 2f       	mov	r23, r22
 638:	6a 2f       	mov	r22, r26
 63a:	11 24       	eor	r1, r1
 63c:	9f 57       	subi	r25, 0x7F	; 127
 63e:	50 40       	sbci	r21, 0x00	; 0
 640:	8a f0       	brmi	.+34     	; 0x664 <__mulsf3_pse+0x84>
 642:	e1 f0       	breq	.+56     	; 0x67c <__mulsf3_pse+0x9c>
 644:	88 23       	and	r24, r24
 646:	4a f0       	brmi	.+18     	; 0x65a <__mulsf3_pse+0x7a>
 648:	ee 0f       	add	r30, r30
 64a:	ff 1f       	adc	r31, r31
 64c:	bb 1f       	adc	r27, r27
 64e:	66 1f       	adc	r22, r22
 650:	77 1f       	adc	r23, r23
 652:	88 1f       	adc	r24, r24
 654:	91 50       	subi	r25, 0x01	; 1
 656:	50 40       	sbci	r21, 0x00	; 0
 658:	a9 f7       	brne	.-22     	; 0x644 <__mulsf3_pse+0x64>
 65a:	9e 3f       	cpi	r25, 0xFE	; 254
 65c:	51 05       	cpc	r21, r1
 65e:	70 f0       	brcs	.+28     	; 0x67c <__mulsf3_pse+0x9c>
 660:	14 c0       	rjmp	.+40     	; 0x68a <__fp_inf>
 662:	aa cf       	rjmp	.-172    	; 0x5b8 <__fp_szero>
 664:	5f 3f       	cpi	r21, 0xFF	; 255
 666:	ec f3       	brlt	.-6      	; 0x662 <__mulsf3_pse+0x82>
 668:	98 3e       	cpi	r25, 0xE8	; 232
 66a:	dc f3       	brlt	.-10     	; 0x662 <__mulsf3_pse+0x82>
 66c:	86 95       	lsr	r24
 66e:	77 95       	ror	r23
 670:	67 95       	ror	r22
 672:	b7 95       	ror	r27
 674:	f7 95       	ror	r31
 676:	e7 95       	ror	r30
 678:	9f 5f       	subi	r25, 0xFF	; 255
 67a:	c1 f7       	brne	.-16     	; 0x66c <__mulsf3_pse+0x8c>
 67c:	fe 2b       	or	r31, r30
 67e:	88 0f       	add	r24, r24
 680:	91 1d       	adc	r25, r1
 682:	96 95       	lsr	r25
 684:	87 95       	ror	r24
 686:	97 f9       	bld	r25, 7
 688:	08 95       	ret

0000068a <__fp_inf>:
 68a:	97 f9       	bld	r25, 7
 68c:	9f 67       	ori	r25, 0x7F	; 127
 68e:	80 e8       	ldi	r24, 0x80	; 128
 690:	70 e0       	ldi	r23, 0x00	; 0
 692:	60 e0       	ldi	r22, 0x00	; 0
 694:	08 95       	ret

00000696 <__fp_nan>:
 696:	9f ef       	ldi	r25, 0xFF	; 255
 698:	80 ec       	ldi	r24, 0xC0	; 192
 69a:	08 95       	ret

0000069c <__fp_pscA>:
 69c:	00 24       	eor	r0, r0
 69e:	0a 94       	dec	r0
 6a0:	16 16       	cp	r1, r22
 6a2:	17 06       	cpc	r1, r23
 6a4:	18 06       	cpc	r1, r24
 6a6:	09 06       	cpc	r0, r25
 6a8:	08 95       	ret

000006aa <__fp_pscB>:
 6aa:	00 24       	eor	r0, r0
 6ac:	0a 94       	dec	r0
 6ae:	12 16       	cp	r1, r18
 6b0:	13 06       	cpc	r1, r19
 6b2:	14 06       	cpc	r1, r20
 6b4:	05 06       	cpc	r0, r21
 6b6:	08 95       	ret

000006b8 <__fp_round>:
 6b8:	09 2e       	mov	r0, r25
 6ba:	03 94       	inc	r0
 6bc:	00 0c       	add	r0, r0
 6be:	11 f4       	brne	.+4      	; 0x6c4 <__fp_round+0xc>
 6c0:	88 23       	and	r24, r24
 6c2:	52 f0       	brmi	.+20     	; 0x6d8 <__fp_round+0x20>
 6c4:	bb 0f       	add	r27, r27
 6c6:	40 f4       	brcc	.+16     	; 0x6d8 <__fp_round+0x20>
 6c8:	bf 2b       	or	r27, r31
 6ca:	11 f4       	brne	.+4      	; 0x6d0 <__fp_round+0x18>
 6cc:	60 ff       	sbrs	r22, 0
 6ce:	04 c0       	rjmp	.+8      	; 0x6d8 <__fp_round+0x20>
 6d0:	6f 5f       	subi	r22, 0xFF	; 255
 6d2:	7f 4f       	sbci	r23, 0xFF	; 255
 6d4:	8f 4f       	sbci	r24, 0xFF	; 255
 6d6:	9f 4f       	sbci	r25, 0xFF	; 255
 6d8:	08 95       	ret

000006da <__divmodhi4>:
 6da:	97 fb       	bst	r25, 7
 6dc:	07 2e       	mov	r0, r23
 6de:	16 f4       	brtc	.+4      	; 0x6e4 <__divmodhi4+0xa>
 6e0:	00 94       	com	r0
 6e2:	06 d0       	rcall	.+12     	; 0x6f0 <__divmodhi4_neg1>
 6e4:	77 fd       	sbrc	r23, 7
 6e6:	08 d0       	rcall	.+16     	; 0x6f8 <__divmodhi4_neg2>
 6e8:	0b d0       	rcall	.+22     	; 0x700 <__udivmodhi4>
 6ea:	07 fc       	sbrc	r0, 7
 6ec:	05 d0       	rcall	.+10     	; 0x6f8 <__divmodhi4_neg2>
 6ee:	3e f4       	brtc	.+14     	; 0x6fe <__divmodhi4_exit>

000006f0 <__divmodhi4_neg1>:
 6f0:	90 95       	com	r25
 6f2:	81 95       	neg	r24
 6f4:	9f 4f       	sbci	r25, 0xFF	; 255
 6f6:	08 95       	ret

000006f8 <__divmodhi4_neg2>:
 6f8:	70 95       	com	r23
 6fa:	61 95       	neg	r22
 6fc:	7f 4f       	sbci	r23, 0xFF	; 255

000006fe <__divmodhi4_exit>:
 6fe:	08 95       	ret

00000700 <__udivmodhi4>:
 700:	aa 1b       	sub	r26, r26
 702:	bb 1b       	sub	r27, r27
 704:	51 e1       	ldi	r21, 0x11	; 17
 706:	07 c0       	rjmp	.+14     	; 0x716 <__udivmodhi4_ep>

00000708 <__udivmodhi4_loop>:
 708:	aa 1f       	adc	r26, r26
 70a:	bb 1f       	adc	r27, r27
 70c:	a6 17       	cp	r26, r22
 70e:	b7 07       	cpc	r27, r23
 710:	10 f0       	brcs	.+4      	; 0x716 <__udivmodhi4_ep>
 712:	a6 1b       	sub	r26, r22
 714:	b7 0b       	sbc	r27, r23

00000716 <__udivmodhi4_ep>:
 716:	88 1f       	adc	r24, r24
 718:	99 1f       	adc	r25, r25
 71a:	5a 95       	dec	r21
 71c:	a9 f7       	brne	.-22     	; 0x708 <__udivmodhi4_loop>
 71e:	80 95       	com	r24
 720:	90 95       	com	r25
 722:	bc 01       	movw	r22, r24
 724:	cd 01       	movw	r24, r26
 726:	08 95       	ret

00000728 <_exit>:
 728:	f8 94       	cli

0000072a <__stop_program>:
 72a:	ff cf       	rjmp	.-2      	; 0x72a <__stop_program>
